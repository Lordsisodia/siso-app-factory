import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { FormField } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { cn } from "@/lib/utils";
import { useUser } from "@clerk/nextjs";
import { useEffect, useId } from "react";
import { useController } from "react-hook-form";
import { useSubmitFormHotkeys } from "../../hooks/use-hooks";
import { makeSlugFromName } from "../../hooks/use-is-check-slug-available";
import { usePrefillAutogeneratedSlug } from "../../hooks/use-name-slug-form";
export const ComponentForm = ({ form, status, handleSubmit, hotkeysEnabled = true, isSlugReadOnly = true, publishAsUserId, showOptionalFields = true, placeholderName = "", isFirstStep = false, }) => {
    const { user: currentUser } = useUser();
    const userId = publishAsUserId ?? currentUser?.id;
    usePrefillAutogeneratedSlug({
        form,
        publishAsUserId: userId,
        status,
    });
    if (handleSubmit) {
        useSubmitFormHotkeys(form, handleSubmit, hotkeysEnabled);
    }
    const nameId = useId();
    const slugId = useId();
    const descriptionId = useId();
    const registryId = useId();
    const defaultRows = 2;
    const handleTextareaInput = (e) => {
        const textarea = e.target;
        textarea.style.height = "auto";
        const style = window.getComputedStyle(textarea);
        const borderHeight = parseInt(style.borderTopWidth) + parseInt(style.borderBottomWidth);
        const newHeight = textarea.scrollHeight + borderHeight;
        textarea.style.height = `${newHeight}px`;
    };
    const { field: nameField } = useController({
        name: "name",
        control: form.control,
        rules: { required: true },
    });
    useEffect(() => {
        if (nameField.value) {
            const newSlug = makeSlugFromName(nameField.value);
            form.setValue("component_slug", newSlug);
        }
    }, [nameField.value, form]);
    return (_jsxs("div", { className: "flex flex-col gap-4 w-full", children: [_jsxs("div", { className: "grid grid-cols-2 gap-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsxs(Label, { htmlFor: nameId, children: ["Name ", _jsx("span", { className: "text-destructive", children: "*" })] }), _jsx(Input, { id: nameId, ref: nameField.ref, placeholder: `e.g. "${(placeholderName || "Button").replace(/([a-z])([A-Z])/g, "$1 $2")}"`, value: nameField.value, disabled: status !== "draft", onChange: nameField.onChange, onBlur: nameField.onBlur, className: "w-full text-foreground", required: true }), _jsx("p", { className: "text-xs text-muted-foreground", role: "region", "aria-live": "polite", children: "The display name of your component" }), form.formState.errors.name && (_jsx("p", { className: "text-xs text-destructive mt-1", children: form.formState.errors.name.message }))] }), _jsxs("div", { className: "space-y-2", children: [_jsxs(Label, { htmlFor: slugId, children: ["Slug ", _jsx("span", { className: "text-destructive", children: "*" })] }), _jsx(Input, { id: slugId, ...form.register("component_slug", { required: true }), className: "w-full", placeholder: `e.g. "${makeSlugFromName(placeholderName || "Button")}"`, disabled: true, required: true }), _jsx("p", { className: "text-xs text-muted-foreground", role: "region", "aria-live": "polite", children: "Used in the URL and imports, can't be changed later" }), form.formState.errors.component_slug && (_jsx("p", { className: "text-xs text-destructive mt-1", children: form.formState.errors.component_slug.message }))] })] }), showOptionalFields && (_jsxs("div", { className: "space-y-6", children: [_jsx("div", { className: cn("grid gap-4", isFirstStep ? "grid-cols-2" : "grid-cols-1"), children: _jsxs("div", { className: "space-y-2", children: [_jsxs(Label, { htmlFor: descriptionId, children: ["Description ", _jsx("span", { className: "text-destructive", children: "*" })] }), _jsx(FormField, { control: form.control, name: "description", render: ({ field }) => (_jsx(Textarea, { id: descriptionId, placeholder: "Add some description to help others discover your component", className: cn("min-h-[none] resize-none", form.formState.errors.description && "border-destructive"), rows: defaultRows, required: true, ...field, onChange: (e) => {
                                            field.onChange(e);
                                            handleTextareaInput(e);
                                        }, ref: (e) => {
                                            if (e) {
                                                const style = window.getComputedStyle(e);
                                                const lineHeight = parseInt(style.lineHeight);
                                                const borderHeight = parseInt(style.borderTopWidth) +
                                                    parseInt(style.borderBottomWidth);
                                                const paddingHeight = parseInt(style.paddingTop) +
                                                    parseInt(style.paddingBottom);
                                                const initialHeight = lineHeight * defaultRows +
                                                    borderHeight +
                                                    paddingHeight;
                                                e.style.height = `${initialHeight}px`;
                                            }
                                        } })) }), _jsx("p", { className: "text-xs text-muted-foreground", role: "region", "aria-live": "polite", children: "A brief description of what your component does" }), form.formState.errors.description && (_jsx("p", { className: "text-xs text-destructive mt-1", children: form.formState.errors.description.message }))] }) }), _jsx("div", { className: cn("grid gap-4", isFirstStep ? "grid-cols-2" : "grid-cols-1"), children: _jsxs("div", { className: "space-y-2", children: [_jsxs(Label, { htmlFor: registryId, children: ["Component type ", _jsx("span", { className: "text-destructive", children: "*" })] }), _jsx(FormField, { control: form.control, name: "registry", render: ({ field }) => (_jsxs(Select, { value: field.value, onValueChange: field.onChange, required: true, children: [_jsx(SelectTrigger, { id: registryId, className: "[&_[data-desc]]:hidden", children: _jsx(SelectValue, { placeholder: "Select component type" }) }), _jsxs(SelectContent, { className: "[&_*[role=option]>span]:end-2 [&_*[role=option]>span]:start-auto [&_*[role=option]]:pe-8 [&_*[role=option]]:ps-2", children: [_jsxs(SelectItem, { value: "ui", children: ["UI Component", _jsx("span", { className: "mt-1 block text-xs text-muted-foreground", "data-desc": true, children: "Reusable interface elements like buttons, inputs, and cards" })] }), _jsxs(SelectItem, { value: "hooks", children: ["Hook", _jsx("span", { className: "mt-1 block text-xs text-muted-foreground", "data-desc": true, children: "Custom React hooks for state and logic management" })] }), _jsxs(SelectItem, { value: "blocks", children: ["Block", _jsx("span", { className: "mt-1 block text-xs text-muted-foreground", "data-desc": true, children: "Larger sections like Hero, Features, or Testimonials" })] }), _jsxs(SelectItem, { value: "icons", children: ["Icon", _jsx("span", { className: "mt-1 block text-xs text-muted-foreground", "data-desc": true, children: "Custom icon components and icon sets" })] })] })] })), rules: { required: "Component type is required" } }), _jsx("p", { className: "text-xs text-muted-foreground", role: "region", "aria-live": "polite", children: "The category your component belongs to" }), form.formState.errors.registry && (_jsx("p", { className: "text-xs text-destructive mt-1", children: form.formState.errors.registry.message }))] }) })] }))] }));
};
//# sourceMappingURL=component.js.map